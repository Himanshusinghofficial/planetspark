{"version":3,"sources":["Square.js","Board.js","GameUtil.js","App.js","index.js"],"names":["Square","props","className","value","renderSquare","i","onClick","squares","Board","lines","X","O","clrTomato","clrLightBlue","getAvailableIndex","indexes","length","index","isValueAtIndexes","result","calculateWinner","player1Name","player2Name","a","b","c","COMPUTER","PLAYER2","App","handleClick","state","stepNumber","isXNext","isInputLocked","isWithComputer","player1WinCount","player2WinCount","winner","setState","setTimeout","computerTurn","calculatedIndex","calculateNextMove","resetGame","Array","fill","isOpponentDecided","restartGame","decideOpponent","opponent","this","gameStatus","getGameStatus","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3f359b2f.chunk.js","sourcesContent":["export default function Square(props) {\n    return (\n        <div className={props.value}>\n            {props.value}\n        </div>\n    );\n}\n","import Square from './Square';\n\nfunction renderSquare(props, i) {\n  return (\n    <div className=\"square\" onClick={() => props.onClick(i)}>\n      <Square\n        value={props.squares[i]}\n      />\n    </div>\n  );\n}\n\nexport default function Board(props) {\n  return (\n    <div className=\"game-board\">\n        {renderSquare(props, 0)}\n        {renderSquare(props, 1)}\n        {renderSquare(props, 2)}\n        {renderSquare(props, 3)}\n        {renderSquare(props, 4)}\n        {renderSquare(props, 5)}\n        {renderSquare(props, 6)}\n        {renderSquare(props, 7)}\n        {renderSquare(props, 8)}\n      </div>\n  );\n}\n","const lines = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6],\n];\n\nconst X = \"X\";\nconst O = \"O\";\nconst clrTomato = \"color-tomato\";\nconst clrLightBlue = \"color-light-blue\";\n\nfunction getAvailableIndex(squares, indexes) {\n  for (let i = 0; i < indexes.length; i++) {\n    const index = indexes[i];\n    if (!squares[index]) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nfunction isValueAtIndexes(squares, value, indexes) {\n  let result = true;\n  for (const index of indexes) {\n    result = result && squares[index] === value;\n  }\n  return result;\n}\n\nexport function getGameStatus(winner, isXNext, stepNumber, player1Name, player2Name) {\n  if (winner) {\n    return (\n      <div className={isXNext ? clrLightBlue : clrTomato}>\n        {winner} Wins!\n      </div>\n    );\n  } else if (stepNumber < 9) {\n    return (\n      <div className={isXNext ? clrTomato : clrLightBlue}>\n        {isXNext ? player1Name : player2Name} turn\n      </div>\n    );\n  } else {\n    return (\n      <div>\n        <span className={clrTomato}>Match</span>{\" \"}\n        <span className={clrLightBlue}>Draw!!!</span>\n      </div>\n    );\n  }\n}\n\nexport function calculateWinner(squares, player1Name, player2Name) {\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a] === X ? player1Name : player2Name;\n    }\n  }\n  return null;\n}\n\nexport function calculateNextMove(squares, stepNumber) {\n  let calculatedIndex;\n\n  // check if computer is winning\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (\n      (isValueAtIndexes(squares, O, [a, b]) ||\n        isValueAtIndexes(squares, O, [a, c]) ||\n        isValueAtIndexes(squares, O, [b, c])) &&\n      (!squares[a] || !squares[b] || !squares[c])\n    ) {\n      return !squares[a] ? a : !squares[b] ? b : c;\n    }\n  }\n\n  // check if player is winning then block the square\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (\n      (isValueAtIndexes(squares, X, [a, b]) ||\n        isValueAtIndexes(squares, X, [a, c]) ||\n        isValueAtIndexes(squares, X, [b, c])) &&\n      (!squares[a] || !squares[b] || !squares[c])\n    ) {\n      return !squares[a] ? a : !squares[b] ? b : c;\n    }\n  }\n\n  // block the center square if available\n  if (!squares[4]) {\n    return 4;\n  }\n\n  // if player blocked the diagonal corners then block his next move\n  if (\n    squares[4] === O &&\n    stepNumber < 5 &&\n    (isValueAtIndexes(squares, X, [0, 8]) ||\n      isValueAtIndexes(squares, X, [2, 6]))\n  ) {\n    calculatedIndex = getAvailableIndex(squares, [1, 3, 5, 7]);\n    if (calculatedIndex !== -1) {\n      return calculatedIndex;\n    }\n  }\n\n  // block the player's opposit corner if available\n  if (squares[4] === O) {\n    if (squares[0] === X && !squares[8]) {\n      return 8;\n    }\n    if (squares[8] === X && !squares[0]) {\n      return 0;\n    }\n    if (squares[2] === X && !squares[6]) {\n      return 6;\n    }\n    if (squares[6] === X && !squares[2]) {\n      return 2;\n    }\n  }\n\n  return getAvailableIndex(squares, [0, 2, 6, 8, 1, 3, 5, 7]);\n}\n","import React from \"react\";\nimport Board from \"./Board\";\nimport { calculateWinner, calculateNextMove, getGameStatus } from \"./GameUtil\";\nimport \"./Game.css\";\n\nconst O = 'O';\nconst X = 'X';\nconst COMPUTER = 'Computer';\nconst PLAYER1 = 'Player 1';\nconst PLAYER2 = 'Player 2';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.player1Name = PLAYER1;\n    this.player2Name = PLAYER2;\n    this.state = {\n      squares: Array(9).fill(\"\"),\n      player1WinCount: 0,\n      player2WinCount: 0,\n      stepNumber: 0,\n      winner: \"\",\n      isOpponentDecided: false,\n      isWithComputer: false,\n      isXNext: true,\n      isInputLocked: false\n    };\n  }\n\n  handleClick = (i) => {\n    let { stepNumber, isXNext, isInputLocked, isWithComputer, player1WinCount, player2WinCount} = { ...this.state };\n    const squares = [...this.state.squares];\n    \n    if (this.state.winner || squares[i] || (isWithComputer && isInputLocked)) {\n      return;\n    }\n\n    squares[i] = isXNext ? X : O;\n    ++stepNumber;\n    const winner = calculateWinner(squares, this.player1Name, this.player2Name);\n\n    if(winner) {\n      isXNext ? ++player1WinCount : ++player2WinCount;\n    }\n\n    this.setState(\n      {\n        squares: squares,\n        stepNumber: stepNumber,\n        winner: winner,\n        player1WinCount: player1WinCount,\n        player2WinCount: player2WinCount,\n        isXNext: !isXNext,\n        isInputLocked: true\n      },\n      () => {\n        if (isWithComputer && !winner && stepNumber < 9) {\n          setTimeout(this.computerTurn, 750);\n        }\n      }\n    );\n  };\n\n  computerTurn = () => {\n    let { stepNumber, isXNext, player2WinCount } = { ...this.state };\n    const squares = [...this.state.squares];\n    ++stepNumber;\n    const index = calculateNextMove(squares, stepNumber);\n    squares[index] = O;\n    const winner = calculateWinner(squares, this.player1Name, this.player2Name);\n    \n    if(winner) {\n      ++player2WinCount;\n    }\n\n    this.setState({\n      squares: squares,\n      stepNumber: stepNumber,\n      winner: winner,\n      isXNext: !isXNext,\n      player2WinCount: player2WinCount,\n      isInputLocked: false\n    });\n  };\n\n  resetGame = () => {\n    this.player2Name = PLAYER2;\n    this.setState({\n      squares: Array(9).fill(\"\"),\n      stepNumber: 0,\n      player1WinCount: 0,\n      player2WinCount: 0,\n      winner: \"\",\n      isXNext: true,\n      isOpponentDecided: false,\n      isInputLocked: false\n    });\n  };\n\n  restartGame = () => {\n    this.setState({\n      squares: Array(9).fill(\"\"),\n      stepNumber: 0,\n      winner: \"\",\n      isXNext: true,\n      isInputLocked: false\n    });\n  };\n\n  decideOpponent = (opponent) => {\n    const isWithComputer = opponent === COMPUTER;\n\n    if (isWithComputer) {\n      this.player2Name = COMPUTER;\n    }\n\n    this.setState({\n      isOpponentDecided: true,\n      isWithComputer: isWithComputer,\n    });\n  };\n\n  render() {\n    const { squares, winner, stepNumber, isOpponentDecided, isXNext, player1WinCount, player2WinCount } = {\n      ...this.state,\n    };\n\n    const gameStatus = getGameStatus(winner, isXNext, stepNumber, this.player1Name, this.player2Name);\n\n    return (\n      <div className='game-container'>\n        {isOpponentDecided ? (\n          <>\n            <div className='players-score'>\n              <div className='p1'>{this.player1Name} wins: {player1WinCount}</div>              \n              <div className='p2'>{this.player2Name} wins: {player2WinCount}</div>\n            </div>\n            \n            <div>\n              <div className=\"game-status\">{gameStatus}</div>\n\n              <Board squares={squares} onClick={this.handleClick} />\n\n              <div>\n                <button className=\"btn margin-right\" onClick={this.restartGame}>\n                  Restart\n                </button>\n                <button className=\"btn\" onClick={this.resetGame}>\n                  Reset\n                </button>\n              </div>\n            </div>            \n          </>\n        ) : (\n          <>\n            <div className=\"game-name color-tomato\">Tic Tac Toe</div>\n            <div className=\"players-btn\">\n              <button className=\"btn margin-right\" onClick={() => this.decideOpponent(COMPUTER)}>\n                1 Player\n              </button>\n              <button className=\"btn\" onClick={() => this.decideOpponent(PLAYER2)}>\n                2 Players\n              </button>    \n            </div>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}